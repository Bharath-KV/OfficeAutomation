#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 30, 2018 03:58:23 PM
#    Jul 30, 2018 04:27:56 PM
#    Jul 30, 2018 09:51:25 PM
# Created by Bharath Kumar V 
#!/usr/bin/python

import sys
import time
import serial

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global che44
    che44 = StringVar()
    
def load_LON(p1):
    w._ledOn = PhotoImage(file="icons/light_on.png")
    p1.configure(image=w._ledOn)
    p1.image = w._ledOn

def load_LOFF(p1):
    w._ledOff = PhotoImage(file="light_off.png")
    p1.configure(image=w._ledOff)
    p1.image = w._ledOff
    
def load_RON(p1):
    w._fanOn = PhotoImage(file="rfan.png")
    p1.configure(image=w._fanOn)
    p1.image = w._fanOn

def load_ROFF(p1):
    w._fanOff = PhotoImage(file="sfan.png")
    p1.configure(image=w._fanOff)
    p1.image = w._fanOff

def room1Led1Control(p1):
    if (p1 == "OFF"):
        print("R1L01: "+p1)
        w.ser.write("L8.1")
        load_LON(w.R1L01)
        w.R1L01['text'] = "ON"
    else:
        print("R1L01: "+p1)
        w.ser.write("L8.0")
        load_LOFF(w.R1L01)
        w.R1L01['text'] = "OFF"
    sys.stdout.flush()

def room1Led2Control(p1):
   if (p1 == "OFF"):
        print("R1L02: "+p1)
        w.ser.write("L9.1")
        load_LON(w.R1L02)
        w.R1L02['text'] = "ON"
   else:
        print("R1L02: "+p1)
        w.ser.write("L9.0")
        load_LOFF(w.R1L02)
        w.R1L02['text'] = "OFF"
   sys.stdout.flush()

    
def room1Led3Control(p1):
    if (p1 == "OFF"):
        print("R1L03: "+p1)
        w.ser.write("L10.1")
        load_LON(w.R1L03)
        w.R1L03['text'] = "ON"
    else:
        print("R1L03: "+p1)
        w.ser.write("L10.0")
        load_LOFF(w.R1L03)
        w.R1L03['text'] = "OFF"
    sys.stdout.flush()

def room1Led4Control(p1):
    if (p1 == "OFF"):
        print("R1L4: "+p1)
        w.ser.write("L11.1")
        load_LON(w.R1L4)
        w.R1L4['text'] = "ON"
    else:
        print("R1L4: "+p1)
        w.ser.write("L11.0")
        load_LOFF(w.R1L4)
        w.R1L4['text'] = "OFF"
    sys.stdout.flush()

def room1Fan1Control(p1):
    if (p1 == "OFF"):
        print("R1F01: "+p1)
        load_RON(w.R1F01)
        w.R1F01['text'] = "ON"
    else:
        print("R1F01: "+p1)
        load_ROFF(w.R1F01)
        w.R1F01['text'] = "OFF"
    sys.stdout.flush()
    
def room1Fan2Control(p1):
    if (p1 == "OFF"):
        print("R1F02: "+p1)
        load_RON(w.R1F02)
        w.R1F02['text'] = "ON"
    else:
        print("R1F02: "+p1)
        load_ROFF(w.R1F02)
        w.R1F02['text'] = "OFF"
    sys.stdout.flush()
    
def room1Fan1SControl(p1):
    if (p1 == "U"):
        print("R1F01CU: "+p1)
    elif (p1 == "D"):
        print("R1F01CD: "+p1)
    sys.stdout.flush()

def room1Fan2SControl(p1):
    if (p1 == "U"):
        print("R1F02CU: "+p1)
    elif (p1 == "D"):
        print("R1F02CD: "+p1)
    sys.stdout.flush()

def room2Led1Control(p1):
    if (p1 == "OFF"):
        print("R2L01: "+p1)
        w.ser.write("L12.1")
        load_LON(w.R2L01)
        w.R2L01['text'] = "ON"
    else:
        print("R2L01: "+p1)
        w.ser.write("L12.0")
        load_LOFF(w.R2L01)
        w.R2L01['text'] = "OFF"
    sys.stdout.flush()

def room2Led2Control(p1):
    if (p1 == "OFF"):
        print("R2L02: "+p1)
        w.ser.write("L13.1")
        load_LON(w.R2L02)
        w.R2L02['text'] = "ON"
    else:
        print("R2L02: "+p1)
        w.ser.write("L13.0")
        load_LOFF(w.R2L02)
        w.R2L02['text'] = "OFF"
    sys.stdout.flush()

def room2Led3Control(p1):
    if (p1 == "OFF"):
        print("R2L03: "+p1)
        w.ser.write("L14.1")
        load_LON(w.R2L03)
        w.R2L03['text'] = "ON"
    else:
        print("R2L03: "+p1)
        w.ser.write("L14.0")
        load_LOFF(w.R2L03)
        w.R2L03['text'] = "OFF"
    sys.stdout.flush()

def room2Led4Control(p1):
    if (p1 == "OFF"):
        print("R2L04: "+p1)
        w.ser.write("L15.1")
        load_LON(w.R2L04)
        w.R2L04['text'] = "ON"
    else:
        print("R2L04: "+p1)
        w.ser.write("L15.0")
        load_LOFF(w.R2L04)
        w.R2L04['text'] = "OFF"
    sys.stdout.flush()
    
def room2Fan1Control(p1):
    if (p1 == "OFF"):
        print("R2F01: "+p1)
        load_RON(w.R2F01)
        w.R2F01['text'] = "ON"
    else:
        print("R1F01: "+p1)
        load_ROFF(w.R2F01)
        w.R2F01['text'] = "OFF"
    sys.stdout.flush()
    
def room2Fan2Control(p1):
    if (p1 == "OFF"):
        print("R2F02: "+p1)
        load_RON(w.R2F02)
        w.R2F02['text'] = "ON"
    else:
        print("R2F02: "+p1)
        load_ROFF(w.R2F02)
        w.R2F02['text'] = "OFF"
    sys.stdout.flush()
    
def room2Fan1SControl(p1):
    if (p1 == "U"):
        print("R2F01CU: "+p1)
    elif (p1 == "D"):
        print("R2F01CD: "+p1)
    sys.stdout.flush()

def room2Fan2SControl(p1):
    if (p1 == "U"):
        print("R2F02CU: "+p1)
    elif (p1 == "D"):
        print("R2F02CD: "+p1)
    sys.stdout.flush()

def room3Led1Control(p1):
    if (p1 == "OFF"):
        print("R3L01: "+p1)
        w.ser.write("L16.1")
        load_LON(w.R3L01)
        w.R3L01['text'] = "ON"
    else:
        print("R3L01: "+p1)
        w.ser.write("L16.0")
        load_LOFF(w.R3L01)
        w.R3L01['text'] = "OFF"
    sys.stdout.flush()

def room3Led2Control(p1):
    if (p1 == "OFF"):
        print("R3L02: "+p1)
        w.ser.write("L17.1")
        load_LON(w.R3L02)
        w.R3L02['text'] = "ON"
    else:
        print("R3L02: "+p1)
        w.ser.write("L17.0")
        load_LOFF(w.R3L02)
        w.R3L02['text'] = "OFF"
    sys.stdout.flush()

def room3Led3Control(p1):
    if (p1 == "OFF"):
        print("R3L03: "+p1)
        w.ser.write("L18.1")
        load_LON(w.R3L03)
        w.R3L03['text'] = "ON"
    else:
        print("R3L03: "+p1)
        w.ser.write("L18.0")
        load_LOFF(w.R3L03)
        w.R3L03['text'] = "OFF"
    sys.stdout.flush()

def room3Led4Control(p1):
    if (p1 == "OFF"):
        print("R3L04: "+p1)
        w.ser.write("L19.1")
        load_LON(w.R3L04)
        w.R3L04['text'] = "ON"
    else:
        print("R3L04: "+p1)
        w.ser.write("L19.0")
        load_LOFF(w.R3L04)
        w.R3L04['text'] = "OFF"
    sys.stdout.flush()

def room3Fan1Control(p1):
    if (p1 == "OFF"):
        print("R3F01: "+p1)
        load_RON(w.R3F01)
        w.R3F01['text'] = "ON"
    else:
        print("R3F01: "+p1)
        load_ROFF(w.R3F01)
        w.R3F01['text'] = "OFF"
    sys.stdout.flush()
    
def room3Fan2Control(p1):
    if (p1 == "OFF"):
        print("R3F02: "+p1)
        load_RON(w.R3F02)
        w.R3F02['text'] = "ON"
    else:
        print("R3F02: "+p1)
        load_ROFF(w.R3F02)
        w.R3F02['text'] = "OFF"
    sys.stdout.flush()
    
def room3Fan1SControl(p1):
    if (p1 == "U"):
        loadFanState(p1, p1.fc + 1)
        print("R3F01CU: "+p1)
    elif (p1 == "D"):
        loadFanState(p1, p1.fc - 1)
        print("R3F01CD: "+p1)
    sys.stdout.flush()

def room3Fan2SControl(p1):
    if (p1 == "U"):
        loadFanState(p1, p1.fc + 1)
        print("R3F02CU: "+p1)
    elif (p1 == "D"):
        loadFanState(p1, p1.fc - 1)
        print("R3F02CD: "+p1)
    sys.stdout.flush()

def outLed1Control(p1):
    if (p1 == "OFF"):
        print("OutL01: "+p1)
        w.ser.write("L20.1")
        load_LON(w.OutL01)
        w.OutL01['text'] = "ON"
    else:
        print("OutL01: "+p1)
        w.ser.write("L20.0")
        load_LOFF(w.OutL01)
        w.OutL01['text'] = "OFF"
    sys.stdout.flush()

def outLed2Control(p1):
    if (p1 == "OFF"):
        print("OutL02: "+p1)
        w.ser.write("L21.1")
        load_LON(w.OutL02)
        w.OutL02['text'] = "ON"
    else:
        print("OutL02: "+p1)
        w.ser.write("L21.0")
        load_LOFF(w.OutL02)
        w.OutL02['text'] = "OFF"
    sys.stdout.flush()

def outLed3Control(p1):
    if (p1 == "OFF"):
        print("OutL03: "+p1)
        w.ser.write("L22.1")
        load_LON(w.OutL03)
        w.OutL03['text'] = "ON"
    else:
        print("OutL03: "+p1)
        w.ser.write("L22.0")
        load_LOFF(w.OutL03)
        w.OutL03['text'] = "OFF"
    sys.stdout.flush()

def outLed4Control(p1):
    if (p1 == "OFF"):
        print("OutL04: "+p1)
        w.ser.write("L23.1")
        load_LON(w.OutL04)
        w.OutL04['text'] = "ON"
    else:
        print("OutL04: "+p1)
        w.ser.write("L23.0")
        load_LOFF(w.OutL04)
        w.OutL04['text'] = "OFF"
    sys.stdout.flush()
    
def PeopleCountControl(p1):
    if (p1 == "U"):
        loadPeopleCount(w.pcount + 1)
    elif (p1 == "D"):
        loadPeopleCount(w.pcount - 1)
    sys.stdout.flush()

def tick(time1=''):
    time2 = time.strftime("%I:%M:%S")
    if time2 != time1:
        time1 = time2
        w.TimeLabel.configure(text = time2)
    w.TimeLabel.after(200, tick)

def loadDateDay():
    date_day = time.strftime("%d/%m/%Y  %A")
    w.DateDayLabel.configure(text = date_day)

def loadTemperature():
    innerTemp = "20.0\u00B0C"
    outerTemp = "30.0\u00B0C"
    w.InTempLabel.configure(text = "Inside: "+innerTemp)
    w.OutTempLabel.configure(text = "Outside: "+outerTemp)
    w.InTempLabel.after(200, tick)
    w.OutTempLabel.after(200, tick)
    
def loadPeopleCount(p1):
    w.pcount = p1
    w.PeopleCountLabel.configure(text="PEOPLE INSIDE: "+ str(w.pcount))
    
def loadSafetyStatus():
    w.GSLabel.configure(text = "SAFE")
    w.GSLabel.configure(foreground="#FFFFFF")
    w.GSFrame.configure(background="#27ae60")
    
def loadFanState(p1, s):
    p1.fc= s
    p1.configure(text = str(s))
    
def initSerialCommunication():
    w.ser = serial.Serial("/dev/ttyACM0", 9600)     
    #"/dev/ttyACM0" is the port to which Arduino is connected
    #You can check port in your terminal by typing ls /dev/tty*
    #9600 is the baud rate

def init(top, gui, *args, **kwargs):
    global w, top_level, root, checkImage
    w = gui
    top_level = top
    root = top
    

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import ha
    ha.vp_start_gui()
